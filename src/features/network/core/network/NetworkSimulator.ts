import NeuronAccessor from "../neurons/NeuronAccessor";
import type Network from "./Network";

export class NetworkSimulator {
  private network: Network;

  constructor(network: Network) {
    this.network = network;
  }

  public tick(): void {
    // –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Å–∏–Ω–∞–ø—Å—ã
    for (const synaps of this.network.electricSynapses.values()) {
      synaps.deliver();
    }
    // === Phase 1: –î–æ—Å—Ç–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç —Ä—ë–±–µ—Ä ===
    // –í—Å–µ —Ä—ë–±—Ä–∞ –æ–±–Ω–æ–≤–ª—è—é—Ç –∑–∞–¥–µ—Ä–∂–∫–∏ –∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç –≥–æ—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    for (const synaps of this.network.chemicalSynapses.values()) {
      synaps.deliverSignals(); // –≤–Ω—É—Ç—Ä–∏ –≤—ã–∑—ã–≤–∞–µ—Ç neuron.receive(effect_mV)
    }

    this.applyModulationClouds();

    // === Phase 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –Ω–µ–π—Ä–æ–Ω–æ–≤ ===
    for (const neuron of this.network.neurons.values()) {
      neuron.step(); // ‚Üê –í–°–Å –≤–Ω—É—Ç—Ä–∏: —É—Ç–µ—á–∫–∞, —Å–ø–∞–π–∫, —Ä–µ—Ñ—Ä–∞–∫—Ç–µ—Ä
    }

    // === Phase 3: –£–¥–∞–ª–µ–Ω–∏–µ –º—ë—Ä—Ç–≤—ã—Ö –Ω–µ–π—Ä–æ–Ω–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚Äî –º–æ–∂–Ω–æ —Ä–µ–∂–µ) ===
    this.removeDeadNeurons();
    this.cleanupClouds();
  }

  private removeDeadNeurons(): void {
    for (const neuron of Array.from(this.network.neurons.values())) {
      if (neuron.isDead()) {
        // –£–¥–∞–ª—è–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–∏–Ω–∞–ø—Å—ã
        for (const synaps of neuron.inputSynapses.values()) {
          this.network.removeSynaps(synaps.id);
        }
        // –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ —Å–∏–Ω–∞–ø—Å—ã
        for (const synaps of neuron.outputSynapses.values()) {
          this.network.removeSynaps(synaps.id);
        }
        // –£–¥–∞–ª—è–µ–º –Ω–µ–π—Ä–æ–Ω
        this.network.removeNeuron(neuron.id);
        console.log(`[Network] –ù–µ–π—Ä–æ–Ω ${neuron.id} —É–¥–∞–ª—ë–Ω (–º–µ—Ä—Ç–≤—ã–π)`);
      }
    }
  }

  private cleanupClouds(): void {
    for (const [id, cloud] of this.network.modulationClouds) {
      if (!cloud.isAlive()) {
        this.network.modulationClouds.delete(id);
      }
    }
  }

  private applyModulationClouds(): void {
    // 1. –°–±—Ä–æ—Å: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Å–∏–Ω–∞–ø—Å—ã –∫ –±–∞–∑–æ–≤–æ–π –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç–∏
    for (const synaps of this.network.chemicalSynapses.values()) {
      synaps.resetConductance();
    }

    // 2. –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –æ—Ç –æ–±–ª–∞–∫–æ–≤ ‚Äî —Ç–µ–ø–µ—Ä—å –¥–ª—è –ù–ï–ô–†–û–ù–û–í (–¥–ª—è spikeThreshold, tau)
    for (const neuron of this.network.neurons.values()) {
      const coords = new NeuronAccessor(neuron).getCoords();
      for (const cloud of this.network.modulationClouds.values()) {
        if (cloud.affects(coords) && neuron.hasReceptor(cloud.type)) {
          neuron.applyModulationEffect(cloud.getScaledEffect());
        }
      }
    }

    // 3. –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥—É–ª—è—Ü–∏—é –∫ –ù–ï–ô–†–û–ù–ê–ú
    for (const neuron of this.network.neurons.values()) {
      neuron.finalizeModulation();
    }

    // 4. üî• –°–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ: –ø—Ä–∏–º–µ–Ω—è–µ–º conductanceMultiplier –∫ –í–°–ï–ú –≤—Ö–æ–¥—è—â–∏–º —Å–∏–Ω–∞–ø—Å–∞–º –Ω–µ–π—Ä–æ–Ω–∞
    for (const neuron of this.network.neurons.values()) {
      const coords = new NeuronAccessor(neuron).getCoords();
      let totalMultiplier = 1;

      for (const cloud of this.network.modulationClouds.values()) {
        if (cloud.affects(coords) && neuron.hasReceptor(cloud.type)) {
          const effect = cloud.getScaledEffect();
          if (effect.conductanceMultiplier !== undefined) {
            totalMultiplier *= effect.conductanceMultiplier;
          }
        }
      }

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –∫–æ –≤—Å–µ–º –≤—Ö–æ–¥—è—â–∏–º —Å–∏–Ω–∞–ø—Å–∞–º
      for (const synaps of neuron.inputSynapses.values()) {
        synaps.applyConductanceMultiplier(totalMultiplier);
      }
    }

    // 5. –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–ª–∞–∫–∞
    for (const cloud of this.network.modulationClouds.values()) {
      cloud.update();
    }
    this.cleanupClouds();
  }
}